
import { Component, OnInit ,ViewChild } from '@angular/core';
import {Diff2Html} from 'diff2Html';
import {Injectable} from '@angular/core';
import {HttpClient, HttpHeaders} from '@angular/common/http';
import {Observable} from 'rxjs/Observable';
import {Http} from '@angular/http';


@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',

})
export class HomeComponent implements OnInit {
  outputHtml: string;
  strInput:string;
  isLoading:boolean;
  selectedItem:string;
  selectedTicker:string;
  selectedYear:string;
  constructor(private http: Http) {    
  }


  onClick(){
    this.isLoading=true;

     this.http.get('assets/microsoft_risk_diff.txt').subscribe(data => {
       this.strInput= data.text();
       this.isLoading=false;
       this.outputHtml = Diff2Html.getPrettyHtml(this.strInput, {inputFormat: 'diff', showFiles: true, matching: 'words', outputFormat: 'side-by-side'});
  });
    // "--- a/server/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go\n+++ b/server/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go\n@@ -1035,6 +1035,17 @@ func Prctl(option int, arg2 uintptr, arg3 uintptr, arg4 uintptr, arg5 uintptr) (\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Pselect(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timespec, sigmask *Sigset_t) (n int, err error) {\n+\tr0, _, e1 := Syscall6(SYS_PSELECT6, uintptr(nfd), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)), uintptr(unsafe.Pointer(sigmask)))\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED abh BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func read(fd int, p []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(p) > 0 {\n";
    
  }

  panelOpenState = true;

    tickers= [
    {value: 'AAPL', viewValue: 'AAPL'},
    {value: 'GOOGL', viewValue: 'GOOGL'},
    {value: 'FB', viewValue: 'FB'}
  ];

  items= [
    {value: 'Item 1', viewValue: 'Item 1'},
    {value: 'Item 1A', viewValue: 'Item 1A'},
    {value: 'Item 7', viewValue: 'Item 7'},
    {value: 'Item 7A', viewValue: 'Item 7A'}
  ];

  years= [
    {value: '2007-2008', viewValue: '2007-2008'},
    {value: '2008-2009', viewValue: '2008-2009'},
    {value: '2009-2010', viewValue: '2009-2010'},
    {value: '2010-2011', viewValue: '2010-2011'},
    {value: '2011-2012', viewValue: '2011-2012'},
    {value: '2012-2013', viewValue: '2012-2013'},
    {value: '2013-2014', viewValue: '2013-2014'},
    {value: '2014-2015', viewValue: '2014-2015'},
    {value: '2015-2016', viewValue: '2015-2016'},
    {value: '2016-2017', viewValue: '2016-2017'},
    {value: '2017-2018', viewValue: '2017-2018'},
  ];

  public chartColors: any[] = [
    {
      backgroundColor :'#673ab7',
      borderColor: '#673ab7',
      pointBackgroundColor: '#673ab7',
      pointBorderColor: '#fff',
      pointHoverBackgroundColor: '#fff',
      pointHoverBorderColor: 'rgba(148,159,177,0.8)'
    }
  ];
    
  public Item1ChartOptions:any = {
    scaleShowVerticalLines: false,
    responsive: false,
    fill: false, 
  };
  public Item1ChartLabels:string[] = [ '2008', '2009', '2010'];
  public Item1ChartType:string = 'line';
  public Item1ChartLegend:boolean = true;
 
  public Item1ChartData:any[] = [
    {data: [5.5, 5.9, 8.1], label: 'Item1 (Similarity)',fill: false, lineTension: 0,
    backgroundColor: 'black',borderColor:'black'}
  ];
 
  public Item1AChartOptions:any = {
    scaleShowVerticalLines: false,
    responsive: false
  };
  public Item1AChartLabels:string[] =[ '2008', '2009', '2010'];
  public Item1AChartType:string = 'line';
  public Item1AChartLegend:boolean = true;
 
  public Item1AChartData:any[] = [
    {data: [1, 8, 5], label: 'Item1A (Similarity)',fill: false, lineTension: 0},
  ];

  public Item7ChartOptions:any = {
    scaleShowVerticalLines: false,
    responsive: false
  };
  public Item7ChartLabels:string[] = [ '2008', '2009', '2010'];
  public Item7ChartType:string = 'line';
  public Item7ChartLegend:boolean = true;
 
  public Item7ChartData:any[] = [
    {data: [14, 2.0, 4.5], label: 'Item7 (Similarity)',fill: false, lineTension: 0},
  ];

  public Item7AChartOptions:any = {
    scaleShowVerticalLines: false,
    responsive: false
  };
  public Item7AChartLabels:string[] = [ '2008', '2009', '2010'];
  public Item7AChartType:string = 'line';
  public Item7AChartLegend:boolean = true;
 
  public Item7AChartData:any[] = [
    {data: [10, 8, 2], label: 'Item7A (Similarity)',fill: false, lineTension: 0},
  ];

  ngOnInit() {
    this.selectedItem='Item 1';
    this.selectedYear='2007-2008';
    this.selectedTicker='AAPL';
  }




}
